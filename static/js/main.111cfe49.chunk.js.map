{"version":3,"sources":["leafletOverrides.js","App.js","serviceWorker.js","index.js"],"names":["L","Icon","Default","imagePath","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","isDataLoaded","endpointUrl","_this2","axios","get","then","res","console","log","setState","catch","error","response","getDataFromEndpoint","circleMarkerStyle","PHB","color","weight","fillColor","fillOpacity","TRAFFIC","react_default","a","createElement","className","material_table_default","title","columns","field","Map","center","zoom","style","width","height","TileLayer","attribution","url","ext","subdomains","map","item","i","Circle","location_latitude","location_longitude","radius","key","concat","eval_type","Popup","location_name","request_status","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8WAGEA,IAAEC,KAAKC,QAAQC,UAAY,WAEpBH,IAAEC,KAAKC,QAAQE,UAAUC,YAEhCL,IAAEC,KAAKC,QAAQI,aAAa,CAC1BC,cAAeC,EAAQ,KACvBC,QAASD,EAAQ,KACjBE,UAAWF,EAAQ,WC4GRG,cA5Gb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,GACNC,cAAc,GAJCT,mFAQCU,GAAa,IAAAC,EAAAR,KAC/BS,IACGC,IAAIH,GACJI,KAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZJ,EAAKO,SAAS,CACZV,KAAMO,EAAIP,KACVC,cAAc,MAGjBU,MAAM,SAAAC,GACLJ,QAAQC,IAAIG,EAAMC,yDAKtBlB,KAAKmB,oBACH,uFAKF,IAcMC,EAAoB,CACxBC,IAAK,CACHC,MAAO,OACPC,OAAQ,EACRC,UAAW,UACXC,YAAa,IAEfC,QAAS,CACPJ,MAAO,OACPC,OAAQ,EACRC,UAAW,UACXC,YAAa,KAIjB,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZ9B,KAAKI,MAAME,cACVqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,MAAM,kBACNC,QApCI,CACd,CAAED,MAAO,gBAAiBE,MAAO,iBACjC,CAAEF,MAAO,OAAQE,MAAO,aACxB,CAAEF,MAAO,iBAAkBE,MAAO,mBAkCxB7B,KAAML,KAAKI,MAAMC,QAGrBsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKC,OAnCE,CAAC,OAAQ,QAmCOC,KAlCpB,GAkCgCC,MAhC9B,CACbC,MAAO,OACPC,OAAQ,UA+BEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,YAAY,yNACZC,IAAI,wEACJC,IAAI,MACJC,WAAW,SAEZ7C,KAAKI,MAAMC,KAAKyC,IAAI,SAACC,EAAMC,GAC1B,OACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACEb,OAAQ,CAACW,EAAKG,kBAAmBH,EAAKI,oBACtCC,OAAQ,IACRC,IAAG,GAAAC,OAAKN,EAAL,WACHxB,UAAWJ,EAAkB2B,EAAKQ,WAAW/B,UAC7CF,MAAOF,EAAkB2B,EAAKQ,WAAWjC,MACzCC,OAAQH,EAAkB2B,EAAKQ,WAAWhC,OAC1CE,YACEL,EAAkB2B,EAAKQ,WAAW9B,aAGpCE,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAAA,aAAAyB,OAAQP,EAAKQ,UAAb,aACA5B,EAAAC,EAAAC,cAAA,YAAAyB,OAAOP,EAAKU,gBACZ9B,EAAAC,EAAAC,cAAA,mBAAAyB,OAAcP,EAAKW,gCA/FzBC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,KAAK,SAAA8D,GACjCA,EAAaC","file":"static/js/main.111cfe49.chunk.js","sourcesContent":["import L from \"leaflet\";\n\nexport function overrideLeafletIcons() {\n  L.Icon.Default.imagePath = \".\";\n  // OR\n  delete L.Icon.Default.prototype._getIconUrl;\n\n  L.Icon.Default.mergeOptions({\n    iconRetinaUrl: require(\"leaflet/dist/images/marker-icon-2x.png\"),\n    iconUrl: require(\"leaflet/dist/images/marker-icon.png\"),\n    shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\n  });\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport MaterialTable from \"material-table\";\nimport { Map, TileLayer, Circle, Popup } from \"react-leaflet\";\nimport { overrideLeafletIcons } from \"./leafletOverrides\";\nimport \"./App.css\";\n\noverrideLeafletIcons();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      isDataLoaded: false\n    };\n  }\n\n  getDataFromEndpoint(endpointUrl) {\n    axios\n      .get(endpointUrl)\n      .then(res => {\n        console.log(res);\n        this.setState({\n          data: res.data,\n          isDataLoaded: true\n        });\n      })\n      .catch(error => {\n        console.log(error.response);\n      });\n  }\n\n  componentWillMount() {\n    this.getDataFromEndpoint(\n      \"http://schoolofdata.austintexas.io/signal_requests\"\n    );\n  }\n\n  render() {\n    const columns = [\n      { title: \"Location Name\", field: \"location_name\" },\n      { title: \"Type\", field: \"eval_type\" },\n      { title: \"Request Status\", field: \"request_status\" }\n    ];\n\n    const position = [30.28, -97.735];\n    const zoom = 10;\n\n    const mapCss = {\n      width: \"100%\",\n      height: \"100vh\"\n    };\n\n    const circleMarkerStyle = {\n      PHB: {\n        color: \"#fff\",\n        weight: 1,\n        fillColor: \"#a65628\",\n        fillOpacity: 0.8\n      },\n      TRAFFIC: {\n        color: \"#fff\",\n        weight: 1,\n        fillColor: \"#237FB4\",\n        fillOpacity: 0.8\n      }\n    };\n\n    return (\n      <div className=\"App\">\n        {this.state.isDataLoaded && (\n          <div className=\"row\">\n            <div className=\"col\">\n              <MaterialTable\n                title=\"Signal Requests\"\n                columns={columns}\n                data={this.state.data}\n              />\n            </div>\n            <div className=\"col map-container\">\n              <Map center={position} zoom={zoom} style={mapCss}>\n                <TileLayer\n                  attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n                  url=\"http://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.{ext}\"\n                  ext=\"png\"\n                  subdomains=\"abcd\"\n                />\n                {this.state.data.map((item, i) => {\n                  return (\n                    <Circle\n                      center={[item.location_latitude, item.location_longitude]}\n                      radius={500}\n                      key={`${i}_marker`}\n                      fillColor={circleMarkerStyle[item.eval_type].fillColor}\n                      color={circleMarkerStyle[item.eval_type].color}\n                      weight={circleMarkerStyle[item.eval_type].weight}\n                      fillOpacity={\n                        circleMarkerStyle[item.eval_type].fillOpacity\n                      }\n                    >\n                      <Popup>\n                        <h3>{`${item.eval_type} REQUEST`}</h3>\n                        <p>{`${item.location_name}`}</p>\n                        <p>{`Status ${item.request_status}`}</p>\n                      </Popup>\n                    </Circle>\n                  );\n                })}\n              </Map>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}